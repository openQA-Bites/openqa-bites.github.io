<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on openQA bites</title><link>https://openQA-Bites.github.io/tags/python/</link><description>Recent content in Python on openQA bites</description><generator>Hugo</generator><language>en-us</language><managingEditor>felix.niederwanger@suse.de (phoenix)</managingEditor><webMaster>felix.niederwanger@suse.de (phoenix)</webMaster><lastBuildDate>Tue, 15 Feb 2022 14:13:55 +0100</lastBuildDate><atom:link href="https://openQA-Bites.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code and poetry</title><link>https://openQA-Bites.github.io/posts/2022/2022-02-15-vscode-poetry/</link><pubDate>Tue, 15 Feb 2022 14:13:55 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-02-15-vscode-poetry/</guid><description>&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt; is (yet another) python packaging and dependency management system. In this blog post I&amp;rsquo;m gonna describe how I am working with poetry repositories within &lt;a href="https://vscodium.com/"&gt;VS Codium&lt;/a&gt;, the freely licensed variant of VS Code.&lt;/p&gt;</description></item><item><title>Extract SCHEDULE from an openQA job</title><link>https://openQA-Bites.github.io/posts/2021/2021-12-13-extract-schedule-script/</link><pubDate>Mon, 13 Dec 2021 13:46:51 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-12-13-extract-schedule-script/</guid><description>&lt;p&gt;Then using &lt;code&gt;openqa-clone-job&lt;/code&gt; (and derivates) one can use the &lt;code&gt;SCHEDULE&lt;/code&gt; variable to clone a test run with a custom set of test modules. This is particular useful, when developing a new test case and you need a verification run with e.g. an additional test module or to exclude some failing ones.
However it is sometimes cumbersome to type out a large list of tests into a custom &lt;code&gt;SCHEDULE&lt;/code&gt; variable, if the amount of test modules exceeds 5 or more tests (e.g. &lt;a href="https://openqa.opensuse.org/tests/2082504"&gt;extra_tests_textmode&lt;/a&gt; - good luck!).&lt;/p&gt;</description></item><item><title>Clean empty job groups in openQA</title><link>https://openQA-Bites.github.io/posts/2021/2021-11-17-clean-empty-job-groups/</link><pubDate>Wed, 17 Nov 2021 09:51:26 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-11-17-clean-empty-job-groups/</guid><description>&lt;p&gt;In this blog post I present you a small script, which can help you to remove empty job groups from your own openQA instance. This is helpful if you have a development instance with a lot of job groups, that you never use. This script can help you to tidy the list of dangling job groups.&lt;/p&gt;</description></item><item><title>Playing with the openqa API</title><link>https://openQA-Bites.github.io/posts/2021/2021-09-23-api-playing/</link><pubDate>Fri, 24 Sep 2021 08:00:00 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-09-23-api-playing/</guid><description>&lt;p&gt;Today we are going to play a bit around with the amazing API that every openQA instance provides.
The aim of this tutorial is to show how the API can be accessed using a simple language like python.
More advanced topics like job posting, deletion and other methods that require authentication are possible but not covered extensively in this post.
The reference for this post will be &lt;a href="https://openqa.opensuse.org"&gt;openqa.opensuse.org&lt;/a&gt;, but everything works pretty much with every openQA instance.&lt;/p&gt;</description></item></channel></rss>