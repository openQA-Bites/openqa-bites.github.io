<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on openQA bites</title><link>https://openQA-Bites.github.io/tags/go/</link><description>Recent content in Go on openQA bites</description><generator>Hugo</generator><language>en-us</language><managingEditor>felix.niederwanger@suse.de (phoenix)</managingEditor><webMaster>felix.niederwanger@suse.de (phoenix)</webMaster><lastBuildDate>Thu, 19 May 2022 09:57:43 +0200</lastBuildDate><atom:link href="https://openQA-Bites.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>seidl - display current SUSE publiccloud images in your terminal</title><link>https://openQA-Bites.github.io/posts/2022/2022-05-19-seidl/</link><pubDate>Thu, 19 May 2022 09:57:43 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-05-19-seidl/</guid><description>&lt;p&gt;&lt;a href="https://github.com/grisu48/seidl"&gt;seidl&lt;/a&gt; is a small &lt;a href="https://pint.suse.com/"&gt;pint&lt;/a&gt; query utility designed to easily list the current publiccloud images in the terminal. Pint (Public Cloud Information Tracker) is the SUSE service to provide data about the current state of publiccloud images across all supported public cloud service providers. The &lt;a href="https://github.com/SUSE-Enceladus/public-cloud-info-client"&gt;public-cloud-info-client&lt;/a&gt; is an already existing versitale client, however I find its usage a bit bulky if it comes to the task of displaying the current images. This is where &lt;code&gt;seidl&lt;/code&gt; complements the existing client. See for yourself:&lt;/p&gt;</description></item><item><title>Use local go modules</title><link>https://openQA-Bites.github.io/posts/2021/2021-08-13-local-go-modules/</link><pubDate>Fri, 13 Aug 2021 10:58:14 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-08-13-local-go-modules/</guid><description>&lt;p&gt;When dealing with go modules, sometimes it&amp;rsquo;s handy to test some changes from a local repository instead of using the upstream one.&lt;/p&gt;
&lt;p&gt;Now, go programs are typically relying only on the upstream packages. Take the module file of &lt;code&gt;openqa-mon&lt;/code&gt; as example:&lt;/p&gt;</description></item></channel></rss>