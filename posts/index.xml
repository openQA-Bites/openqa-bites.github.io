<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on openQA bites</title><link>https://openQA-Bites.github.io/posts/</link><description>Recent content in Posts on openQA bites</description><generator>Hugo</generator><language>en-us</language><managingEditor>felix.niederwanger@suse.de (phoenix)</managingEditor><webMaster>felix.niederwanger@suse.de (phoenix)</webMaster><lastBuildDate>Mon, 13 Jan 2025 09:56:23 +0100</lastBuildDate><atom:link href="https://openQA-Bites.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>openQA and PowerPC</title><link>https://openQA-Bites.github.io/posts/2024/2024-11-11-openqa_and_powerpc/</link><pubDate>Mon, 11 Nov 2024 11:14:48 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2024/2024-11-11-openqa_and_powerpc/</guid><description>&lt;p&gt;Due to recent changes in the worker configuration of the SUSE internal openQA instance, we needed to reconfigure some of the PowerPC jobs in openQA. This triggered a couple of questions regarding the availability of openQA worker, worker backends, their differences and their caveats. This blog post should act as a quickstart/overview guide for people getting into OpenQA testing on the PowerPC architecture.&lt;/p&gt;</description></item><item><title>openqa-mq shows you openQA's RabbitMQ events</title><link>https://openQA-Bites.github.io/posts/2024/2024-08-19-openqa-mq_shows_you_openqas_rabbitmq_events/</link><pubDate>Mon, 19 Aug 2024 07:55:19 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2024/2024-08-19-openqa-mq_shows_you_openqas_rabbitmq_events/</guid><description>&lt;p&gt;&lt;code&gt;openqa-mq&lt;/code&gt; is a small CLI tool that receives openQA related events from RabbitMQ. It is part of the &lt;code&gt;openqa-mon&lt;/code&gt; packages and will work for OSD and for OOO.&lt;/p&gt;</description></item><item><title>Paste text on VNC terminal</title><link>https://openQA-Bites.github.io/posts/2024/2024-03-21-paste_text_on_vnc_terminal/</link><pubDate>Thu, 21 Mar 2024 10:06:56 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2024/2024-03-21-paste_text_on_vnc_terminal/</guid><description>&lt;p&gt;A coworker recently faced the problem to copy&amp;amp;pasting a large amount of text into a VNC terminal for openQA. VNC doesn&amp;rsquo;t always allow copy&amp;amp;paste and when you have to manually type a longer string this is prone to typos and human error.&lt;/p&gt;</description></item><item><title>Upgrade a PostgreSQL container to a new major version</title><link>https://openQA-Bites.github.io/posts/2023/2023-11-23-upgrade_a_postgresql_container_to_a_new_major_version/</link><pubDate>Thu, 23 Nov 2023 16:09:52 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-11-23-upgrade_a_postgresql_container_to_a_new_major_version/</guid><description>&lt;p&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; is a capable and mature database, which comes in a major or minor version number (e.g. &lt;code&gt;16.0&lt;/code&gt;). Minor releases never change the internal storage, so the database always remains compatible with earlier and later minor releases. However major version releases do not have such a guarentee. We are running a single PostgreSQL database as a &lt;code&gt;podman&lt;/code&gt; container and I recently (today) had the glorious task of migrating this database to the next major version. In this blog post I describe how we did this migration.&lt;/p&gt;</description></item><item><title>CLI: Check if there are jobs running</title><link>https://openQA-Bites.github.io/posts/2023/2023-05-05-cli_check_if_there_are_jobs_running/</link><pubDate>Fri, 05 May 2023 09:32:47 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-05-05-cli_check_if_there_are_jobs_running/</guid><description>&lt;p&gt;I recently automated the installation of updates on my openQA development instance. The goal was to make the instance updates itself over night, but only if it is idle, i.e. there are no running jobs. Sometimes when I&amp;rsquo;m busy, the instance needs to work overnight and despite openQA being able to restart cancelled jobs from a reboot, I prefer to avoid situations where this might result in problems in times, where I really can&amp;rsquo;t have that.&lt;/p&gt;</description></item><item><title>openQA: Could not configure /dev/net/tun (tap3): Operation not permitted</title><link>https://openQA-Bites.github.io/posts/2023/2023-03-13-tap_not_permitted/</link><pubDate>Mon, 13 Mar 2023 14:58:18 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-03-13-tap_not_permitted/</guid><description>&lt;p&gt;I recently encountered a new interesting openQA issue:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[2023-03-13T14:18:22.651705+01:00] [warn] [pid:18929] !!! : qemu-system-x86_64: -netdev tap,id=qanet0,ifname=tap3,script=no,downscript=no: could not configure /dev/net/tun (tap3): Operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is an error that you likely are encountering on a older openQA instance, after you setup multimachine jobs but haven&amp;rsquo;t used them in a while. For me the solution was to grant the &lt;code&gt;CAP_NET_ADMIN&lt;/code&gt; capabilities to the qemu binary (again):&lt;/p&gt;</description></item><item><title>VM test cluster using JeOS/MinimalVM images</title><link>https://openQA-Bites.github.io/posts/2023/2023-03-08-vm_test_cluster_using_jeos/</link><pubDate>Wed, 08 Mar 2023 14:41:06 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-03-08-vm_test_cluster_using_jeos/</guid><description>&lt;p&gt;JeOS (Just enough OS) or MinimalVM images are minimal VM images (duh!) that can be used to quickly deploy VMs. Instead of a installation you only need to go through a first boot setup. This makes those images very handy if you need to spin up a bunch of test VMs as for instance if you need a custom cluster.&lt;/p&gt;</description></item><item><title>Safely clone a job on a production instance</title><link>https://openQA-Bites.github.io/posts/2023/2023-02-23-safely_clone_a_job_on_a_production_instance/</link><pubDate>Thu, 23 Feb 2023 14:42:22 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-02-23-safely_clone_a_job_on_a_production_instance/</guid><description>&lt;p&gt;When developing new openQA tests you will have to run a lot of verification and debug test runs.
This is why I typically encourage people to do all openQA testing on their own instances, to prevent spamming of the production instances.&lt;/p&gt;</description></item><item><title>molecule and systemd and cgroupns</title><link>https://openQA-Bites.github.io/posts/2023/2023-01-30-molecule_and_systemd/</link><pubDate>Mon, 30 Jan 2023 16:17:26 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-01-30-molecule_and_systemd/</guid><description>&lt;p&gt;It&amp;rsquo;s Hackweek and I&amp;rsquo;m back at working on the &lt;a href="https://github.com/GeekOops"&gt;GeekOops&lt;/a&gt; project. One of the more annoying tasks that I have been postponing already since some time is to adjust the molecule workflow to work with cgroups 2.&lt;/p&gt;</description></item><item><title>Reviewing openQA jobs with openqa-revtui</title><link>https://openQA-Bites.github.io/posts/2023/2023-01-27-reviewing_openqa_jobs_with_openqa-revtui/</link><pubDate>Fri, 27 Jan 2023 09:12:16 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2023/2023-01-27-reviewing_openqa_jobs_with_openqa-revtui/</guid><description>&lt;p&gt;The &lt;code&gt;openqa-revtui&lt;/code&gt; tool is a neat CLI utility for helping you review openQA jobs and job groups.
It is part of the &lt;code&gt;openqa-mon&lt;/code&gt; project, which has grown in the last years and now consists on more than the job monitoring tool itself.&lt;/p&gt;</description></item><item><title>openQA: emulated aarch64 worker</title><link>https://openQA-Bites.github.io/posts/2022/2022-10-04-emulated_aarch64_worker/</link><pubDate>Tue, 04 Oct 2022 08:29:20 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-10-04-emulated_aarch64_worker/</guid><description>&lt;p&gt;Are you in dire need of an aarch64 worker on your own openQA instance, but no suitable hardware lying around?
If speed is not your main concern, then don&amp;rsquo;t worry - you can just enable a qemu-emulated aarch64 worker on your openQA instance (probably x86_64). In this post we&amp;rsquo;re gonna explore how to setup an emulated aarch64 qemu worker on your own openQA instance in less than 10 minutes.&lt;/p&gt;</description></item><item><title>openqa: asset download request but no domains passlisted</title><link>https://openQA-Bites.github.io/posts/2022-07-14-asset_download_request_but_no_domains_passlisted/</link><pubDate>Thu, 14 Jul 2022 13:23:55 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022-07-14-asset_download_request_but_no_domains_passlisted/</guid><description>&lt;p&gt;&lt;strong&gt;Symptom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When posting a job using , you see an error message of the following kind:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$ openqa-cli api -X POST isos ...
403 Forbidden
Asset download requested but no domains passlisted! Set download_domains.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>molecule test: failed to connect to bus in systemd container</title><link>https://openQA-Bites.github.io/posts/2022/2022-06-27-molecule-failed-connect-dbus-systemd/</link><pubDate>Mon, 27 Jun 2022 13:39:07 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-06-27-molecule-failed-connect-dbus-systemd/</guid><description>&lt;p&gt;&lt;a href="https://molecule.readthedocs.io/en/latest/index.html"&gt;Ansible Molecule&lt;/a&gt; is a project to help you test your ansible roles. I&amp;rsquo;m using molecule for automatically testing the ansible roles of &lt;a href="https://geekoops.github.io/"&gt;geekoops&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, while hacking on the geekoops roles, &lt;code&gt;molecule test&lt;/code&gt; was complaining on my Tumbleweed machine:&lt;/p&gt;</description></item><item><title>BCI test tutorial</title><link>https://openQA-Bites.github.io/posts/2022/2022-06-16-bci_test_tutorial/</link><pubDate>Thu, 16 Jun 2022 13:23:42 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-06-16-bci_test_tutorial/</guid><description>&lt;p&gt;Base Container Images (BCI) are a SUSE offer for a variety of container images suitable for building custom applications atop of the SUSE Linux Enterprise (SLE). They are a suitable building platform for different container applications and are available for free without subscription. In this blog post I&amp;rsquo;m covering how we test BCI before they are released and how you can run individual tests on them.&lt;/p&gt;</description></item><item><title>seidl - display current SUSE publiccloud images in your terminal</title><link>https://openQA-Bites.github.io/posts/2022/2022-05-19-seidl/</link><pubDate>Thu, 19 May 2022 09:57:43 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-05-19-seidl/</guid><description>&lt;p&gt;&lt;a href="https://github.com/grisu48/seidl"&gt;seidl&lt;/a&gt; is a small &lt;a href="https://pint.suse.com/"&gt;pint&lt;/a&gt; query utility designed to easily list the current publiccloud images in the terminal. Pint (Public Cloud Information Tracker) is the SUSE service to provide data about the current state of publiccloud images across all supported public cloud service providers. The &lt;a href="https://github.com/SUSE-Enceladus/public-cloud-info-client"&gt;public-cloud-info-client&lt;/a&gt; is an already existing versitale client, however I find its usage a bit bulky if it comes to the task of displaying the current images. This is where &lt;code&gt;seidl&lt;/code&gt; complements the existing client. See for yourself:&lt;/p&gt;</description></item><item><title>Running an aarch64 image in qemu</title><link>https://openQA-Bites.github.io/posts/2022/2022-04-13-qemu-aarch64/</link><pubDate>Wed, 13 Apr 2022 09:50:46 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-04-13-qemu-aarch64/</guid><description>&lt;p&gt;Running a &lt;code&gt;x86_64&lt;/code&gt; image in &lt;code&gt;qemu&lt;/code&gt; machine can be as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu-system-x86_64 openSUSE-Leap-15.3-JeOS.x86_64-kvm-and-xen.qcow2

# A more extended example
qemu-system-x86_64 -m 1G -cpu host -enable-kvm -smp cores=2,threads=1,sockets=1 -drive file=openSUSE-Leap-15.3-JeOS.x86_64-kvm-and-xen.qcow2,if=virtio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing the same for &lt;code&gt;aarch64&lt;/code&gt; is a bit more tricky. In this tutorial we&amp;rsquo;re gonna learn how to run a &lt;code&gt;aarch64&lt;/code&gt; vm using &lt;code&gt;qemu&lt;/code&gt;. This approach works on native aarch64 hardware and as emulated VM on any other architectures as well.&lt;/p&gt;</description></item><item><title>openQA and dehydrated</title><link>https://openQA-Bites.github.io/posts/2022/2022-03-29-openqa-dehydrated/</link><pubDate>Tue, 29 Mar 2022 16:52:35 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-03-29-openqa-dehydrated/</guid><description>&lt;p&gt;In this blog post I&amp;rsquo;m gonna show you, how you can enable https for your openQA instance using &lt;code&gt;dehydrated&lt;/code&gt; and the internal SUSE CA.
The same procedure should also work for Let&amp;rsquo;s Encrypt.&lt;/p&gt;</description></item><item><title>Fix the "Wrong version of perltidy" issue in tools/tidy</title><link>https://openQA-Bites.github.io/posts/2022/2022-03-04-perltidy/</link><pubDate>Fri, 04 Mar 2022 10:32:23 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-03-04-perltidy/</guid><description>&lt;p&gt;A commen error when running &lt;code&gt;tools/tidy&lt;/code&gt; in the &lt;a href="https://github.com/os-autoinst/os-autoinst-distri-opensuse"&gt;openSUSE/SLES tests repository for openQA&lt;/a&gt; is the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Wrong version of perltidy. Found '20211027', expected '20211029'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This indicated a mismatch of the found vs. expected version of perltidy and the tidy script aborts to avoid inconsistent formatting between your PR and the CI pipeline. In Perl this is unfortunately necessary, as often a new version of &lt;code&gt;perltidy&lt;/code&gt; formats the code differently.&lt;/p&gt;</description></item><item><title>VS Code and poetry</title><link>https://openQA-Bites.github.io/posts/2022/2022-02-15-vscode-poetry/</link><pubDate>Tue, 15 Feb 2022 14:13:55 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-02-15-vscode-poetry/</guid><description>&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt; is (yet another) python packaging and dependency management system. In this blog post I&amp;rsquo;m gonna describe how I am working with poetry repositories within &lt;a href="https://vscodium.com/"&gt;VS Codium&lt;/a&gt;, the freely licensed variant of VS Code.&lt;/p&gt;</description></item><item><title>Booting custom Azure VM images</title><link>https://openQA-Bites.github.io/posts/2022/2022-01-26-azure-images/</link><pubDate>Wed, 26 Jan 2022 16:03:48 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2022/2022-01-26-azure-images/</guid><description>&lt;p&gt;This blog post ist about uploading a custom VM disk image to the Azure cloud and create a VM to boot from this image.&lt;/p&gt;
&lt;p&gt;If you just want to upload a image, checkout the &lt;a href="az_upload_img"&gt;az_upload_img&lt;/a&gt; bash script at the very end of this post for a easy-to-use script without the need to dive into details.&lt;/p&gt;</description></item><item><title>Extract SCHEDULE from an openQA job</title><link>https://openQA-Bites.github.io/posts/2021/2021-12-13-extract-schedule-script/</link><pubDate>Mon, 13 Dec 2021 13:46:51 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-12-13-extract-schedule-script/</guid><description>&lt;p&gt;Then using &lt;code&gt;openqa-clone-job&lt;/code&gt; (and derivates) one can use the &lt;code&gt;SCHEDULE&lt;/code&gt; variable to clone a test run with a custom set of test modules. This is particular useful, when developing a new test case and you need a verification run with e.g. an additional test module or to exclude some failing ones.
However it is sometimes cumbersome to type out a large list of tests into a custom &lt;code&gt;SCHEDULE&lt;/code&gt; variable, if the amount of test modules exceeds 5 or more tests (e.g. &lt;a href="https://openqa.opensuse.org/tests/2082504"&gt;extra_tests_textmode&lt;/a&gt; - good luck!).&lt;/p&gt;</description></item><item><title>Windows VM and Hyper-V (nested virtualization)</title><link>https://openQA-Bites.github.io/posts/2021/2021-12-02-hyperv-nested-guest/</link><pubDate>Thu, 02 Dec 2021 15:54:43 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-12-02-hyperv-nested-guest/</guid><description>&lt;p&gt;In this encore to the &lt;a href="https://openQA-Bites.github.io/posts/2021-12-01-run-azure-image-on-hyperv/"&gt;Run Azure images in Hyper-V or kvm&lt;/a&gt; will briefly discuss, if it is possible to create your own Hyper-V Windows Hypervisor as a kvm guest on openSUSE Tumbleweed.&lt;/p&gt;</description></item><item><title>Run Azure images in Hyper-V or kvm</title><link>https://openQA-Bites.github.io/posts/2021/2021-12-01-run-azure-image-on-hyperv/</link><pubDate>Wed, 01 Dec 2021 14:00:11 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-12-01-run-azure-image-on-hyperv/</guid><description>&lt;p&gt;&lt;strong&gt;Disclaimer: This blog post is about SUSE Linux Enterprise Server images on Azure and probably only useful to SUSE Employees who work with such images.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Container Layer Analyzer</title><link>https://openQA-Bites.github.io/posts/2021/2021-11-19-container-layer-analyzer/</link><pubDate>Fri, 19 Nov 2021 10:28:41 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-11-19-container-layer-analyzer/</guid><description>&lt;p&gt;Today I&amp;rsquo;d like to point out an amazing new tool: The &lt;a href="https://community.suse.com/posts/18455467"&gt;Container Layer Analyzer&lt;/a&gt;, written by Dan Čermák. Dan also wrote a comprehensive &lt;a href="https://community.suse.com/posts/18455467"&gt;blog post about it&lt;/a&gt;, which explains it much better than what I do here.&lt;/p&gt;</description></item><item><title>Clean empty job groups in openQA</title><link>https://openQA-Bites.github.io/posts/2021/2021-11-17-clean-empty-job-groups/</link><pubDate>Wed, 17 Nov 2021 09:51:26 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-11-17-clean-empty-job-groups/</guid><description>&lt;p&gt;In this blog post I present you a small script, which can help you to remove empty job groups from your own openQA instance. This is helpful if you have a development instance with a lot of job groups, that you never use. This script can help you to tidy the list of dangling job groups.&lt;/p&gt;</description></item><item><title>Playing with the openqa API</title><link>https://openQA-Bites.github.io/posts/2021/2021-09-23-api-playing/</link><pubDate>Fri, 24 Sep 2021 08:00:00 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-09-23-api-playing/</guid><description>&lt;p&gt;Today we are going to play a bit around with the amazing API that every openQA instance provides.
The aim of this tutorial is to show how the API can be accessed using a simple language like python.
More advanced topics like job posting, deletion and other methods that require authentication are possible but not covered extensively in this post.
The reference for this post will be &lt;a href="https://openqa.opensuse.org"&gt;openqa.opensuse.org&lt;/a&gt;, but everything works pretty much with every openQA instance.&lt;/p&gt;</description></item><item><title>openqa-cli Cheatsheet</title><link>https://openQA-Bites.github.io/posts/2021/2021-08-20-openqa-cli-cheatsheet/</link><pubDate>Fri, 20 Aug 2021 10:11:22 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-08-20-openqa-cli-cheatsheet/</guid><description>&lt;p&gt;Checkout the new &lt;a href="https://openQA-Bites.github.io/openqa/openqa-cli-cheat-sheet/"&gt;openqa-cli cheat sheet page&lt;/a&gt; where I start to collect some useful &amp;ldquo;how do I do &amp;hellip;&amp;rdquo; snippets for the openQA CLI utility &lt;code&gt;openqa-cli&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Use local go modules</title><link>https://openQA-Bites.github.io/posts/2021/2021-08-13-local-go-modules/</link><pubDate>Fri, 13 Aug 2021 10:58:14 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-08-13-local-go-modules/</guid><description>&lt;p&gt;When dealing with go modules, sometimes it&amp;rsquo;s handy to test some changes from a local repository instead of using the upstream one.&lt;/p&gt;
&lt;p&gt;Now, go programs are typically relying only on the upstream packages. Take the module file of &lt;code&gt;openqa-mon&lt;/code&gt; as example:&lt;/p&gt;</description></item><item><title>pasta - stupid simple pastebin service</title><link>https://openQA-Bites.github.io/posts/2021/2021-07-16-pasta/</link><pubDate>Fri, 16 Jul 2021 10:13:55 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-07-16-pasta/</guid><description>&lt;p&gt;&lt;a href="https://github.com/grisu48/pasta"&gt;&lt;code&gt;pasta&lt;/code&gt;&lt;/a&gt; is a stupid simple pastebin service for self-hosting. I started this project months ago because I was missing an easy, simple and no pain self-hosting solution. This is what &lt;code&gt;pasta&lt;/code&gt; is about. You just throw a file at it via it&amp;rsquo;s archaic web interface, a simple &lt;code&gt;POST&lt;/code&gt; request or with its stupid simple CLI tool:&lt;/p&gt;</description></item><item><title>Hidden gem - Show failures only in external results</title><link>https://openQA-Bites.github.io/posts/2021/2021-05-12-failing-external-results/</link><pubDate>Wed, 12 May 2021 09:25:29 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-05-12-failing-external-results/</guid><description>&lt;p&gt;I just recently discovered one of the hidden gems in the openQA WebUI: Show only failing tests in external results.&lt;/p&gt;
&lt;p&gt;&lt;a href="Screenshot-OnlyFailing.png"&gt;&lt;img src="Screenshot-OnlyFailing_Cropped.png" alt="Screenshot of the openQA WebUI, showing only one failed job in the list of external results"&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hide IDE folders in git using a global gitignore</title><link>https://openQA-Bites.github.io/posts/2021/2021-04-23-global-gitignore/</link><pubDate>Fri, 23 Apr 2021 10:52:47 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-04-23-global-gitignore/</guid><description>&lt;p&gt;Integrated development environemnts (IDE) are using their own folders within your code repositories to store their settings.
This can become annoying when working on a git repository and they keep popping up as untracked files:&lt;/p&gt;</description></item><item><title>IPMI remote access on old machines</title><link>https://openQA-Bites.github.io/posts/2021/2021-04-07-ipmi/</link><pubDate>Wed, 07 Apr 2021 16:06:48 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-04-07-ipmi/</guid><description>&lt;p&gt;This is a very short update post about getting the IPMI Remote Control Java Applet from horrible old system running on modern systems. This is an issue that haunted me for some time.&lt;/p&gt;</description></item><item><title>Active monitoring of openQA jobs</title><link>https://openQA-Bites.github.io/posts/2021/2021-02-25-openqa-mon/</link><pubDate>Thu, 25 Feb 2021 14:54:57 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-02-25-openqa-mon/</guid><description>&lt;p&gt;&lt;a href="https://github.com/grisu48/openqa-mon"&gt;&lt;code&gt;openqa-mon&lt;/code&gt;&lt;/a&gt; is a little command-line utility to monitor one or multiple openQA jobs for their status. This tool is useful if you want to live monitor a handful of jobs closely e.g. for verification runs.&lt;/p&gt;</description></item><item><title>What are Needles</title><link>https://openQA-Bites.github.io/posts/2021/2021-02-10-needles/</link><pubDate>Wed, 10 Feb 2021 09:57:30 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-02-10-needles/</guid><description>&lt;p&gt;In this blog post we are going to give you the easiest introduction to what needles are and how you can use them.
While there are many good talks and documentation on needles out there, it took me longer than it should have to find a easy-to-use
and easy-to-understand introduction into this topic alone.
This blog post should fill this gap.&lt;/p&gt;</description></item><item><title>Background bash commands</title><link>https://openQA-Bites.github.io/posts/2021/2021-02-04-background-scripts/</link><pubDate>Thu, 04 Feb 2021 14:50:02 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021/2021-02-04-background-scripts/</guid><description>This post describes the caveats and correct handling of the bash background operator within openQA.</description></item></channel></rss>